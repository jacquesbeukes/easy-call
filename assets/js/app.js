var ecApp=angular.module("ecApp",["ngRoute","restangular","ecAppControllers","ecAppDirectives","ecAppFilters"]);ecApp.config(["$routeProvider",function(e){e.when("/ready",{templateUrl:djangoStatic+"partials/call/ready.html",controller:"readyCtrl"}).when("/call/:callCat",{templateUrl:djangoStatic+"partials/call/call.html",controller:"callCtrl"}).when("/call/:callCat/empty",{templateUrl:djangoStatic+"partials/call/call_empty.html",controller:"callEmptyCtrl"}).otherwise({redirectTo:"/ready"})}]);var ecAppControllers=angular.module("ecAppControllers",["restangular"]);ecAppControllers.controller("readyCtrl",["$scope","Restangular",function(e,t){t.all("list_types/").getList().then(function(t){e.types=t})}]),ecAppControllers.controller("callEmptyCtrl",["$scope","$routeParams","Restangular",function(e,t,a){a.one("list_types/"+t.callCat+"/").get().then(function(t){e.callType=t})}]),ecAppControllers.controller("callCtrl",["$scope","$routeParams","Restangular","$q","$window",function(e,t,a,i,d){"use strict";a.one("list_types/"+t.callCat+"/").get().then(function(t){e.callType=t}),e.getNextRecord=function(){var l=i.defer(),n=a.one("call_records/"+t.callCat+"/next/");return n.get().then(function(t){e.demographics=t,l.resolve()},function(e){console.log("Error with status code",e.status),l.reject(),d.location.href="#/call/"+t.callCat+"/empty"}),l.promise},e.getUserNotes=function(){a.one("call_records/"+e.demographics.id+"/notes/").get().then(function(t){e.usernotes=t})},e.getSystemNotes=function(){a.one("call_records/"+e.demographics.id+"/sysnotes/").get().then(function(t){e.systemnotes=t})},e.getExtraInfo=function(){a.one("call_records/"+e.demographics.id+"/extra/").get().then(function(t){e.extra=t})},e.getCall=function(){a.one("call/"+e.demographics.call+"/").get().then(function(t){e.call=t})},e.createNote=function(t){var i=e.demographics.id,d=a.one("call_records",i).all("notes/"),l={text:t};d.post(l,{},{"X-CSRFToken":csrf_token}).then(function(t){console.log("Note created."),e.getUserNotes()},function(e){console.log("Error with status code",e.status)})},e.deleteNote=function(t){var i=a.one("user_notes/"+t+"/");i.remove({},{"X-CSRFToken":csrf_token}).then(function(t){console.log("Note deleted."),e.getUserNotes()},function(e){console.log("Error with status code",e.status)})},e.updateNote=function(t,i){var d=a.one("user_notes/"+t+"/");d.get().then(function(t){t.text=i,t.put({},{"X-CSRFToken":csrf_token}).then(function(t){console.log("Note updated."),e.getUserNotes()},function(e){console.log("Error with status code",e.status)})})},e.updateSysNotes=function(t){var i=t.call_record,d=a.one("call_records/"+i+"/sysnotes/");d.get().then(function(a){a.note1=t.note1,a.note2=t.note2,a.note3=t.note3,a.put({},{"X-CSRFToken":csrf_token}).then(function(t){console.log("System Notes updated."),e.getSystemNotes()},function(e){console.log("Error with status code",e.status)})})},e.updateCall=function(t,i){var d=t.pk,l=a.one("call/"+d+"/");l.get().then(function(a){a.data1=t.data1,a.data2=t.data2,a.data3=t.data3,a.data4=t.data4,a.data5=t.data5,a.data6=t.data6,a.data7=t.data7,a.data8=t.data8,a.result=i,a.put({},{"X-CSRFToken":csrf_token}).then(function(t){console.log("Call updated."),e.next()},function(e){console.log("Error with status code",e.status)})})},e.updateRecord=function(e){var t=a.one("call_records");t.id=e.id,t.get().then(function(t){t.name_prefix=e.name_prefix,t.name_middle=e.name_middle,t.name_family=e.name_family,t.name_suffix=e.name_suffix,t.tel_day=e.tel_day,t.tel_evening=e.tel_evening,t.tel_work=e.tel_work,t.tel_mobile=e.tel_mobile,t.address_1=e.address_1,t.address_2=e.address_2,t.address_3=e.address_3,t.suburb=e.suburb,t.city=e.city,t.postcode=e.postcode,t.do_not_mail_reason=e.do_not_mail_reason,t.date_of_birth=e.date_of_birth,t.age=e.age,t.put({},{"X-CSRFToken":csrf_token}).then(function(e){console.log("Note updated.")},function(e){console.log("Error with status code",e.status)})})},e.next=function(){e.getNextRecord().then(function(){e.getUserNotes(),e.getExtraInfo(),e.getSystemNotes(),e.getCall()})},e.next()}]);var ecAppDirectives=angular.module("ecAppDirectives",[]);ecAppDirectives.directive("ecExtraList",function(){return{restrict:"A",scope:{data:"="},template:'<div ng-if="data.field1_display" ec-extra heading="data.field1_display" text="data.field1" class="row"></div><div ng-if="data.field2_display" ec-extra heading="data.field2_display" text="data.field2" class="row"></div><div ng-if="data.field3_display" ec-extra heading="data.field3_display" text="data.field3" class="row"></div><div ng-if="data.field4_display" ec-extra heading="data.field4_display" text="data.field4" class="row"></div><div ng-if="data.field5_display" ec-extra heading="data.field5_display" text="data.field5" class="row"></div><div ng-if="data.field6_display" ec-extra heading="data.field6_display" text="data.field6" class="row"></div><div ng-if="data.field7_display" ec-extra heading="data.field7_display" text="data.field7" class="row"></div><div ng-if="data.field8_display" ec-extra heading="data.field8_display" text="data.field8" class="row"></div><div ng-if="data.field9_display" ec-extra heading="data.field9_display" text="data.field9" class="row"></div><div ng-if="data.field10_display" ec-extra heading="data.field10_display" text="data.field10" class="row"></div><div ng-if="data.field11_display" ec-extra heading="data.field11_display" text="data.field11" class="row"></div><div ng-if="data.field12_display" ec-extra heading="data.field12_display" text="data.field12" class="row"></div><div ng-if="data.field13_display" ec-extra heading="data.field13_display" text="data.field13" class="row"></div><div ng-if="data.field14_display" ec-extra heading="data.field14_display" text="data.field14" class="row"></div><div ng-if="data.field15_display" ec-extra heading="data.field15_display" text="data.field15" class="row"></div><div ng-if="data.field16_display" ec-extra heading="data.field16_display" text="data.field16" class="row"></div><div ng-if="data.field17_display" ec-extra heading="data.field17_display" text="data.field17" class="row"></div><div ng-if="data.field18_display" ec-extra heading="data.field18_display" text="data.field18" class="row"></div><div ng-if="data.field19_display" ec-extra heading="data.field19_display" text="data.field19" class="row"></div><div ng-if="data.field20_display" ec-extra heading="data.field20_display" text="data.field20" class="row"></div>'}}),ecAppDirectives.directive("ecExtra",function(){return{restrict:"A",scope:{heading:"=",text:"="},template:'<em class="col-xs-3 item-heading">{{heading}}</em><span class="col-xs-9">{{text}}</span>'}}),ecAppDirectives.directive("ecAddNote",function(){return{restrict:"A",scope:{savefunc:"&"},template:'<form class="form-horizontal"> <div class="form-group" ng-hide="viewing">   <div class="col-xs-12">     <textarea class="form-control" rows="4"  id="note"                placeholder="Note Text here" ng-model="noteText">     </textarea>   </div> </div> <div class="form-group">   <div class="col-xs-12">     <button class="btn btn-md btn-default" ng-click="edit(noteText)">     New Note</button>   </div> </div>',link:function(e,t,a){e.noteText="",e.viewing=!0,e.edit=function(a){var i=angular.element(t.find("button"));e.viewing?(e.viewing=!1,i.prop("innerText","Add")):(e.viewing=!0,e.savefunc({text:a}),e.noteText="",i.prop("innerText","New Note"))}}}}),ecAppDirectives.directive("ecUserNote",function(){return{restrict:"A",scope:{data:"=",deletefunc:"&",updatefunc:"&"},template:'<span class="badge">{{data.creator_name}}</span><h4 class="list-group-item-heading">{{data.pretty_date}}</h4><div class=".container-fluid">  <div class="row" ng-hide="editing">    <p class="list-group-item-text col-xs-9">{{data.text}}</p>    <div class="col-xs-3 button-group">      <button class="btn btn-md btn-default" ng-click="edit()">        <span class="glyphicon glyphicon-pencil"></button>      <button class="btn btn-md btn-default" ng-click="deletefunc({id: data.pk})">        <span class="glyphicon glyphicon-trash"></button>    </div>  </div>  <div class="row" ng-hide="viewing">    <div class="col-xs-12">      <textarea class="form-control" rows="4"  id="note"                 placeholder="Note Text here" ng-model="data.text">      </textarea>    </div>  </div>  <div class="row" ng-hide="viewing">    <div class="col-xs-12">    <button class="btn btn-md btn-default" ng-click="edit()">    Save</button>    </div>  </div></div>',link:function(e,t,a){e.viewing=!0,e.editing=!1,e.edit=function(){e.viewing?(e.viewing=!1,e.editing=!0):(e.viewing=!0,e.editing=!1,e.updatefunc({text:e.data.text,id:e.data.pk}))}}}}),ecAppDirectives.directive("sysnotes",function(){return{restrict:"E",scope:{data:"=",updatefunc:"&"},template:'<div class="panel panel-default">  <!-- Default panel contents -->  <div class="panel-heading">    <button type="button" class="btn btn-default"            ng-click="edit()">Edit</button>    <h4>System Notes</h4>    <div style="clear: both;"></div>  </div>  <!-- List group -->  <div class="list-group">    <sysnote class="list-group-item" editing="editing"             header="data.note1_display" text="data.note1"             badge="CRM" ng-if="data.note1_display"></sysnote>    <sysnote class="list-group-item" editing="editing"             header="data.note2_display" text="data.note2"             badge="CRM" ng-if="data.note2_display"></sysnote>    <sysnote class="list-group-item" editing="editing"             header="data.note3_display" text="data.note3"             badge="CRM" ng-if="data.note3_display"></sysnote>  </div></div>',link:function(e,t,a){e.editing=!1;var i=angular.element(t.find("button"));e.edit=function(){e.editing?(e.editing=!1,i.prop("innerText","Edit"),e.updatefunc({data:e.data})):(e.editing=!0,i.prop("innerText","Save"))}}}}),ecAppDirectives.directive("sysnote",function(){return{restrict:"E",scope:{editing:"=",header:"=",text:"=",badge:"@"},template:'  <span class="badge">{{badge}}</span>  <h4 class="list-group-item-heading">{{header}}</h4>  <span class="note-text" ng-hide="editing">{{text}}</span>  <textarea ng-show="editing" rows="4" ng-model="text"            class="form-control" ></textarea>'}}),ecAppDirectives.directive("ecResultSection",function(){return{restrict:"E",scope:{call:"=",buttons:"=",updatefunc:"&"},template:'<ec-result-input-list call="call"></ec-result-input-list><div class="row buttons">  <div class="col-xs-4" ng-repeat="button in buttons">    <a ec-action-button linkfunc="submit(button)" data="button"></a>  </div> </div><div class="row buttons">  <div class="col-xs-6">    <a class="btn btn-block btn-primary" ng-click="next()" role="button">Next</a>  </div>  <div class="col-xs-6">    <a class="btn btn-block btn-primary" href="#/ready" role="button">Break</a>  </div></div>',link:function(e,t,a){e.submit=function(t){e.updatefunc({button:t.display_name,data:e.call})},e.next=function(){e.updatefunc({button:"Next",data:e.call})}}}}),ecAppDirectives.directive("ecActionButton",function(){return{restrict:"A",scope:{linkfunc:"&",data:"="},template:'<a ng-class="btnclass(data.category)" role="button" ng-click="linkfunc()">{{data.display_name}}</a>',link:function(e){e.btnclass=function(e){var t="btn btn-block btn-md ";if("gd"===e)var a=t.concat("btn-success");else if("bd"===e)var a=t.concat("btn-danger");else if("nt"===e)var a=t.concat("btn-default");else if("ic"===e)var a=t.concat("btn-primary");else var a=t;return a}}}}),ecAppDirectives.directive("ecResultInputList",function(){return{restrict:"E",scope:{call:"="},template:'<ec-result-input ng-if="call.data1_display"    addon="call.data1_addon"     value="call.data1"    text="call.data1_display"></ec-result-input><ec-result-input ng-if="call.data2_display"    addon="call.data2_addon"     value="call.data2"    text="call.data2_display"></ec-result-input><ec-result-input ng-if="call.data3_display"    addon="call.data3_addon"     value="call.data3"    text="call.data3_display"></ec-result-input><ec-result-input ng-if="call.data4_display"    addon="call.data4_addon"     value="call.data4"    text="call.data4_display"></ec-result-input><ec-result-input ng-if="call.data5_display"    addon="call.data5_addon"     value="call.data5"    text="call.data5_display"></ec-result-input><ec-result-input ng-if="call.data6_display"    addon="call.data6_addon"     value="call.data6"    text="call.data6_display"></ec-result-input><ec-result-input ng-if="call.data7_display"    addon="call.data7_addon"     value="call.data7"    text="call.data7_display"></ec-result-input><ec-result-input ng-if="call.data8_display"    addon="call.data8_addon"     value="call.data8"    text="call.data8_display"></ec-result-input>'}}),ecAppDirectives.directive("ecResultInput",function(){return{restrict:"E",scope:{addon:"=",value:"=",text:"="},template:'<div class="input-group">  <span class="input-group-addon" id="basic-addon1">{{addon}}</span>  <input type="text" class="form-control" placeholder="{{text}}"         aria-describedby="basic-addon1" ng-model="value">  </input></div>'}}),ecAppDirectives.directive("ecDemographicsSection",function(){return{restrict:"E",scope:{data:"=",updatefunc:"&"},template:'<div class=row>  <div class="name col-xs-10">    <span>{{data.name_prefix}}</span>    <span>{{data.name_first}}</span>    <span>{{data.name_middle}}</span>    <span>{{data.name_family}}</span>    <span>{{data.name_suffix}}</span>  </div>  <button type="button" ng-click="edit()"          class="btn btn-default btn-sm pull-right edit">    <span ng-class="glyphclass"></span>  </button></div><div class="edit-mode" ng-show="editing"> <ec-name-edit data="data"></ec-name-edit> <ec-demo-edit data="data"></ec-demo-edit></div><div class="view-mode" ng-hide="editing"> <ec-demo-view data="data"></ec-demo-edit></div>',link:function(e,t,a){e.editing=!1,e.glyphclass="glyphicon glyphicon-edit",e.edit=function(){e.editing?(e.editing=!1,e.glyphclass="glyphicon glyphicon-edit",e.updatefunc({data:e.data})):(e.editing=!0,e.glyphclass="glyphicon glyphicon-save")}}}}),ecAppDirectives.directive("ecDemoView",function(){return{restrict:"E",scope:{data:"="},template:'<div class="demo-set">  <ec-pair label="Serial Number"           data="data.serial_number"></ec-pair>  <ec-pair label="DOB"           data="data.date_of_birth"></ec-pair>  <ec-pair label="Age"           data="data.age"></ec-pair></div><div class="demo-set">  <ec-tel-pair label="Tel (day)" ng-if="data.tel_day"               data="data.tel_day"></ec-tel-pair>  <ec-tel-pair label="Tel (evening)" ng-if="data.tel_evening"               data="data.tel_evening"></ec-tel-pair>  <ec-tel-pair label="Tel (work)" ng-if="data.tel_work"               data="data.tel_work"></ec-tel-pair>  <ec-tel-pair label="Tel (mob)" ng-if="data.tel_mobile"               data="data.tel_mobile"></ec-tel-pair></div><div class="demo-set">  <ec-pair label="Address" ng-if="data.address_1"           data="data.address_1"></ec-pair>  <ec-pair label="Address(2)" ng-if="data.address_2"           data="data.address_2"></ec-pair>  <ec-pair label="Address(3)" ng-if="data.address_3"           data="data.address_3"></ec-pair>  <ec-pair label="Suburb" ng-if="data.suburb"           data="data.suburb"></ec-pair>  <ec-pair label="City" ng-if="data.city"           data="data.city"></ec-pair>  <ec-pair label="Postcode" ng-if="data.postcode"           data="data.postcode"></ec-pair>  <ec-pair label="Do Not Mail Reason" ng-if="data.do_not_mail_reason"           data="data.do_not_mail_reason"></ec-pair></div>'}}),ecAppDirectives.directive("ecDemoEdit",function(){return{restrict:"E",scope:{data:"="},template:'<ec-textfield id="id_serial_number" label="Serial Number"              data="data.serial_number" readonly="true"></ec-textfield><ec-textfield id="id_date_of_birth" label="DOB"              data="data.date_of_birth"></ec-textfield><ec-textfield id="id_age" label="Age"              data="data.age"></ec-textfield><ec-textfield id="id_tel_day" label="Tel (day)"              data="data.tel_day"></ec-textfield><ec-textfield id="id_tel_evening" label="Tel (evening)"              data="data.tel_evening"></ec-textfield><ec-textfield id="id_tel_work" label="Tel (work)"              data="data.tel_work"></ec-textfield><ec-textfield id="id_tel_mobile" label="Tel (mob)"              data="data.tel_mobile"></ec-textfield><ec-textfield id="id_address_1" label="Address"              data="data.address_1"></ec-textfield><ec-textfield id="id_address_2" label="Address(2)"              data="data.address_2"></ec-textfield><ec-textfield id="id_address_3" label="Address(3)"              data="data.address_3"></ec-textfield><ec-textfield id="id_suburb" label="Suburb"              data="data.suburb"></ec-textfield><ec-textfield id="id_city" label="City"              data="data.city"></ec-textfield><ec-textfield id="id_postcode" label="Postcode"              data="data.postcode"></ec-textfield><ec-textarea id="id_do_not_mail_reason" label="Do Not Mail Reason"             data="data.do_not_mail_reason"></ec-textarea>'}}),ecAppDirectives.directive("ecNameEdit",function(){return{restrict:"E",scope:{data:"="},template:'<ec-textfield id="id_name_prefix" label="Name Prefix"           data="data.name_prefix"></ec-textfield><ec-textfield id="id_name_first" label="First Name"           data="data.name_first"></ec-textfield><ec-textfield id="id_name_middle" label="Middle Name or Initials"           data="data.name_middle"></ec-textfield><ec-textfield id="id_name_family" label="Family Name"           data="data.name_family"></ec-textfield><ec-textfield id="id_name_suffix" label="Name Suffix"           data="data.name_suffix"></ec-textfield>'}}),ecAppDirectives.directive("ecPair",function(){return{restrict:"E",scope:{label:"@",data:"="},template:'<div class="row pair">  <span class="col-xs-4 title">{{label}}</span>  <span class="col-xs-8 data">{{data}}</span></div>'}}),ecAppDirectives.directive("ecTelPair",function(){return{restrict:"E",scope:{label:"@",data:"="},template:'<div class="row pair">  <span class="col-xs-4 title">{{label}}</span>  <a href="callto:{{data}}" class="col-xs-8 data">{{data}}</a></div>'}}),ecAppDirectives.directive("ecTextfield",function(){return{restrict:"E",scope:{id:"@",label:"@",data:"=",readonly:"@"},template:'<div class="form-group">  <label for="{{id}}" class="title">{{label}}</label>  <input type="text" class="form-control" id="{{id}}"         ng-model="data"></div>',link:function(e,t,a){var i=angular.element(t.find("input"));"true"===e.readonly&&i.attr("readonly","readonly")}}}),ecAppDirectives.directive("ecTextarea",function(){return{restrict:"E",scope:{id:"@",label:"@",data:"=",readonly:"@"},template:'<div class="form-group">  <label for="{{id}}" class="title">{{label}}</label>  <textarea rows="3" class="form-control" id="{{id}}"         ng-model="data"></textarea></div>',link:function(e,t,a){var i=angular.element(t.find("input"));"true"===e.readonly&&i.attr("readonly","readonly")}}});var ecAppFilters=angular.module("ecAppFilters",[]),ecQueue=angular.module("ecExport",["restangular","ecExportControllers","ecExportDirectives","ecExportServices"]),ecExportControllers=angular.module("ecExportControllers",[]);ecExportControllers.controller("exportCtrl",["$scope","ListType","ListTypeReport","ExportedFiles",function(e,t,a,i){e.refresh=function(){e.getExportableReport(),e.getExportedFiles()},e.getExportableReport=function(){t.getData().then(function(t){e.listtypes={},t.forEach(function(t){a.getData(t.slug).then(function(a){var i={slug:t.slug,display:t.display_name,completed:a.completed,dequeued:a.dequeued};e.listtypes[i.slug]=i})})})},e.getExportedFiles=function(){i.getData().then(function(t){e.updateFilesToDownload(t)})},e.doExport=function(){i.doExport().then(function(t){e.updateFilesToDownload(t),e.getExportableReport()})},e.updateFilesToDownload=function(t){e.filesToDownload={},t.forEach(function(t){var a={filename:t.filename,URL:t.URL};e.filesToDownload[t.filename]=a})},e.listtypes={},e.filesToDownload={},e.refresh()}]);var ecExportDirectives=angular.module("ecExportDirectives",[]);ecExportDirectives.directive("ecReportRow",function(){return{restrict:"A",scope:{data:"="},template:"  <th>{{ data.display }}</th>  <td>{{ data.completed }}</td>  <td>{{ data.dequeued }}</td>"}}),ecExportDirectives.directive("ecFileDownloadItem",function(){return{restrict:"A",scope:{data:"="},template:'  {{ data.filename }}  <a class="btn btn-default btn-xs pull-right" href="{{ data.URL }}" role="button">    <i class="fa fa-cloud-download"></i> download  </a>'}});var ecExportServices=angular.module("ecExportServices",["restangular"]);ecExportServices.factory("ListType",["$q","Restangular",function(e,t){return{getData:function(){var a=e.defer();return t.all("list_types/").getList().then(function(e){a.resolve(e)}),a.promise}}}]),ecExportServices.factory("ListTypeReport",["$q","Restangular",function(e,t){return{getData:function(a){var i=e.defer();return t.all("list_types/").one(a+"/report/").get().then(function(e){i.resolve(e)}),i.promise}}}]),ecExportServices.factory("ExportedFiles",["$q","Restangular",function(e,t){return{getData:function(a){var i=e.defer();return t.all("call_records/").one("exported/").get().then(function(e){i.resolve(e)}),i.promise},doExport:function(a){var i=e.defer();return t.all("call_records/").one("exported/").put({},{"X-CSRFToken":csrf_token}).then(function(e){i.resolve(e)}),i.promise}}}]);var ecQueue=angular.module("ecQueue",["restangular","ecQueueControllers","ecQueueDirectives","ecQueueServices"]),ecQueueControllers=angular.module("ecQueueControllers",[]);ecQueueControllers.controller("queueCtrl",["$scope","ListType","ListTypeReport",function(e,t,a){e.refresh=function(){t.getData().then(function(t){e.listtypes={},t.forEach(function(t){a.getData(t.slug).then(function(a){var i={slug:t.slug,display:t.display_name,inprogress:a.inprogress,"new":a["new"],queued:a.queued};e.listtypes[i.slug]=i})})})},e.doqueue=function(t){var i=t.slug;a.doQueue(i).then(function(a){t.completed=a.completed,t.dequeued=a.dequeued,t.inprogress=a.inprogress,t["new"]=a["new"],t.queued=a.queued,e.listtypes[i]=t})},e.listtypes=[],e.refresh()}]);var ecQueueDirectives=angular.module("ecQueueDirectives",[]);ecQueueDirectives.directive("ecReportRow",function(){return{restrict:"A",scope:{data:"=",queuefunc:"&"},template:'  <th>{{ data.display }}</th>  <td>{{ data.new }}</td>  <td>{{ data.inprogress }}</td>  <td class="info">{{ data.queued }}</td>  <td>    <button class="btn btn-sm btn-primary pull-right" type="button"            ng-click="queue()">Queue</button>  </td>',link:function(e,t,a){e.queue=function(){e.queuefunc({list:e.data})}}}});var ecQueueServices=angular.module("ecQueueServices",["restangular"]);ecQueueServices.factory("ListType",["$q","Restangular",function(e,t){return{getData:function(){var a=e.defer();return t.all("list_types/").getList().then(function(e){a.resolve(e)}),a.promise}}}]),ecQueueServices.factory("ListTypeReport",["$q","Restangular",function(e,t){return{getData:function(a){var i=e.defer();return t.all("list_types/").one(a+"/report/").get().then(function(e){i.resolve(e)}),i.promise},doQueue:function(a){var i=e.defer();return t.all("list_types/").one(a+"/report/").put({},{"X-CSRFToken":csrf_token}).then(function(e){i.resolve(e)}),i.promise}}}]);var ecSearch=angular.module("ecSearch",["restangular","ecSearchControllers","ecSearchDirectives","ecSearchServices"]),ecSearchControllers=angular.module("ecSearchControllers",[]);ecSearchControllers.controller("searchCtrl",["$scope","CallRecord",function(e,t){var a=function(a){t.getList({search:a}).then(function(t){e.data=t})};e.dequeue=function(i){t.one(i).get().then(function(t){t.status="dq",t.put({},{"X-CSRFToken":csrf_token}).then(function(t){a(e.searchString)},function(e){console.log("Error with status code",e.status)})})},e.onChange=function(){e.searchString.length>2&&a(e.searchString)},e.$watch("data",function(t,a){t?t.length<1?e.noresults=!0:e.noresults=!1:e.noresults=!0})}]);var ecSearchDirectives=angular.module("ecSearchDirectives",[]);ecSearchDirectives.directive("ecSearchResult",function(){return{restrict:"E",scope:{data:"=",dequeue:"&"},template:'<div class="row">  <h2 class="list-group-item-heading col-xs-8 col-md-7">SN: {{ data.serial_number }}</h2>  <h4 class="list-group-item-sub-heading pull-right">    {{ data.list_type_display }} <span ng-class="labelClass()">{{ data.status_display }}</span>  </h4></div><h4>{{ full_name }}</h4><ec-tel-compressed day="data.tel_day" evening="data.tel_evening" work="data.tel_work"                   mobile="data.tel_mobile"></ec-tel-compressed><ec-address-compressed addr1="data.address_1" addr2="data.address_3" addr3="data.address_3"                       suburb="data.suburb" city="data.city" postcode="data.postcode"></ec-address-compressed><button type="button" class="btn btn-default btn-md pull-right"        ng-click="handleclick()">  <span class="glyphicon glyphicon-eject" aria-hidden="true">  </span> Dequeue</button>',link:function(e,t,a){function i(){var t="";return e.data.name_prefix&&(t=t+e.data.name_prefix+" "),e.data.name_first&&(t=t+e.data.name_first+" "),e.data.name_middle&&(t=t+e.data.name_middle+" "),e.data.name_family&&(t=t+e.data.name_family+" "),e.data.name_suffix&&(t+=e.data.name_suffix),t}var d=angular.element(t.find("button"));"nw"!==e.data.status&&"ip"!==e.data.status&&d.attr("disabled","disabled"),e.handleclick=function(){e.dequeue({id:e.data.id})},e.labelClass=function(){return"nw"===e.data.status?"label label-success":"ip"===e.data.status?"label label-info":"cp"===e.data.status?"label label-primary":"label label-default"},e.full_name=i()}}}),ecSearchDirectives.directive("ecTelCompressed",function(){return{restrict:"E",scope:{day:"=",evening:"=",work:"=",mobile:"="},template:'<p class="list-group-item-text phone-numbers row">  <span ng-class="spanclass" ng-if="day"><em>(DAY)</em>{{ day }}</span>  <span ng-class="spanclass" ng-if="evening"><em>(EVE)</em>{{ evening }}</span>  <span ng-class="spanclass" ng-if="work"><em>(WORK)</em>{{ work }}</span>  <span ng-class="spanclass" ng-if="mobile"><em>(MOB)</em>{{ mobile }}</span></p>',link:function(e,t,a){e.spanclass="col-xs-10 col-sm-6 col-lg-4"}}}),ecSearchDirectives.directive("ecAddressCompressed",function(){return{restrict:"E",scope:{addr1:"=",addr2:"=",addr3:"=",suburb:"=",city:"=",postcode:"="},template:'<div class="row">  <ul class="list-unstyled col-xs-10 col-sm-6 address">    <li ng-if="addr1">{{ addr1 }}</li>    <li ng-if="addr2">{{ addr2 }}</li>    <li ng-if="addr3">{{ addr3 }}</li>    <li ng-if="suburb">{{ suburb }}</li>    <li>      <span ng-if="city">{{ city }}</span>      <span ng-if="postcode">, {{ postcode }}</span>    </li>  </ul></div>'}});var ecSearchServices=angular.module("ecSearchServices",["restangular"]);ecSearchServices.factory("CallRecord",["Restangular",function(e){return e.service("call_records")}]);
//# sourceMappingURL=data:application/json;base64,
